{"ast":null,"code":"import cors from 'cors';\nimport express from 'express';\nimport mysql from 'mysql2';\nconst blogapp = express();\nblogapp.use(cors());\nblogapp.use(express.json());\n\n// DB connection\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'root',\n  database: 'postblog'\n});\ndb.connect(err => {\n  if (err) {\n    console.error('Database connection failed:', err);\n    process.exit(1);\n  }\n  console.log('Connected to MySQL database.');\n});\n\n// Registration route\nblogapp.post('/userdetails/register', (req, res) => {\n  const {\n    name,\n    mobileNumber,\n    email,\n    password\n  } = req.body;\n  if (!name || !mobileNumber || !email || !password) {\n    return res.status(400).json({\n      message: 'All fields are required'\n    });\n  }\n  const sql = 'INSERT INTO userdetails (name, mobileNumber, email, password) VALUES (?, ?, ?, ?)';\n  db.query(sql, [name, mobileNumber, email, password], (err, result) => {\n    if (err) {\n      console.error('Error during registration:', err);\n      return res.status(500).json({\n        message: 'Registration failed'\n      });\n    }\n    res.status(200).json({\n      message: 'User registered successfully'\n    });\n  });\n});\n\n// Login route\nblogapp.post('/userdetails/login', (req, res) => {\n  const {\n    mobileNumber,\n    password\n  } = req.body;\n  const sql = 'SELECT * FROM userdetails WHERE mobileNumber = ? AND password = ?';\n  db.query(sql, [mobileNumber, password], (err, results) => {\n    if (err) {\n      console.error('Login error:', err);\n      return res.status(500).json({\n        message: 'Server error'\n      });\n    }\n    if (results.length === 0) {\n      return res.status(401).json({\n        message: 'Invalid credentials'\n      });\n    }\n    const user = results[0];\n    res.status(200).json({\n      firstName: user.name\n    });\n  });\n});\n\n// Start the server\nblogapp.listen(5100, () => {\n  console.log('Server is running on port 5100');\n});","map":{"version":3,"names":["cors","express","mysql","blogapp","use","json","db","createConnection","host","user","password","database","connect","err","console","error","process","exit","log","post","req","res","name","mobileNumber","email","body","status","message","sql","query","result","results","length","firstName","listen"],"sources":["C:/Users/moham/Desktop/Projects/postblog/src/blogdetailsservice.js"],"sourcesContent":["import cors from 'cors';\r\nimport express from 'express';\r\nimport mysql from 'mysql2';\r\n\r\nconst blogapp = express();\r\nblogapp.use(cors());\r\nblogapp.use(express.json());\r\n\r\n// DB connection\r\nconst db = mysql.createConnection({\r\n  host: 'localhost',\r\n  user: 'root',\r\n  password: 'root',\r\n  database: 'postblog'\r\n});\r\n\r\ndb.connect(err => {\r\n  if (err) {\r\n    console.error('Database connection failed:', err);\r\n    process.exit(1);\r\n  }\r\n  console.log('Connected to MySQL database.');\r\n});\r\n\r\n// Registration route\r\nblogapp.post('/userdetails/register', (req, res) => {\r\n  const { name, mobileNumber, email, password } = req.body;\r\n\r\n  if (!name || !mobileNumber || !email || !password) {\r\n    return res.status(400).json({ message: 'All fields are required' });\r\n  }\r\n\r\n  const sql = 'INSERT INTO userdetails (name, mobileNumber, email, password) VALUES (?, ?, ?, ?)';\r\n  db.query(sql, [name, mobileNumber, email, password], (err, result) => {\r\n    if (err) {\r\n      console.error('Error during registration:', err);\r\n      return res.status(500).json({ message: 'Registration failed' });\r\n    }\r\n    res.status(200).json({ message: 'User registered successfully' });\r\n  });\r\n});\r\n\r\n// Login route\r\nblogapp.post('/userdetails/login', (req, res) => {\r\n  const { mobileNumber, password } = req.body;\r\n\r\n  const sql = 'SELECT * FROM userdetails WHERE mobileNumber = ? AND password = ?';\r\n  db.query(sql, [mobileNumber, password], (err, results) => {\r\n    if (err) {\r\n      console.error('Login error:', err);\r\n      return res.status(500).json({ message: 'Server error' });\r\n    }\r\n\r\n    if (results.length === 0) {\r\n      return res.status(401).json({ message: 'Invalid credentials' });\r\n    }\r\n\r\n    const user = results[0];\r\n    res.status(200).json({ firstName: user.name });\r\n  });\r\n});\r\n\r\n// Start the server\r\nblogapp.listen(5100, () => {\r\n  console.log('Server is running on port 5100');\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}